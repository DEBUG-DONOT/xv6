# 记录
实验整体算是简单的，可能primes会较为难一些。
## sleep
无愧easy难度，直接调用系统调用就可以了

## pingpong
翻译过来比较让人恼火，但是在理解pipe之后并不是什么很困难的实验。
需要注意的是，如果在父进程和子进程中都采用先读后写的顺序会让程序陷入死锁。
pipe作为在进程之间传递数据的工具还是很好用的。
### 注意
父进程创建管道,得到文件描述符 pipe[0] 和 pipe[1]。
父进程 fork() 生成子进程。
子进程关闭 pipe[0]。这只是关闭了子进程自己的 pipe[0] 文件描述符,而不会影响父进程的 pipe[0] 文件描述符。
父进程仍然持有 pipe[0] 和 pipe[1] 文件描述符,可以继续使用管道进行读写操作。
需要注意的是,如果父进程关闭了 pipe[0] 文件描述符,则子进程无法从管道中读取数据,因为管道的读端已经被关闭。同理,如果子进程关闭了 pipe[1] 文件描述符,则父进程无法向管道中写入数据,因为管道的写端已经被关闭。

## primes
是整个util中最困难的实验。
实际上理解筛选素数的算法并不难，难点在于如何使用fork来完成递归效果。
### fork递归
和直接调用函数进程递归不同，使用fork在进程之间递归，需要一个额外的递归函数，记为f。
我们在main函数中调用fork，这里将实验中产生并传递数据给递归部分的过程放在fork！=0的部分，也就是父进程中。在fork==0的部分，也就是子进程中，实现了f的递归核心功能，作为递归的开始，并在子进程中调用f。
在f中，也是类似的结构，但是相反，我们在主进程中进程f的核心功能的处理，而f的子进程中值调用它本身，完成递归的部分。
不适用fork的话递归要简单明了的多。
**总的来说，实现fork递归最终要的是将递归的功能放在main函数中的子进程中，而在递归函数中，递归功能放在主进程中，而递归调用放在子进程中。**

## find
```c
struct dirent {

  ushort inum;

  char name[DIRSIZ];

};
```
这个结构体定义了目录。其中inum表示这个目录包含多少个文件，而name则包含了目录中文件的名字。

## xargs
这个实验我认为是比较综合的。
用到了前文说的递归的方法。
同时为了判断是否应该停下，让子进程和父进程进行通讯。
理解并使用fork+exec调用其他的函数。
重点就是这些。

# 
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
